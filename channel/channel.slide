Go channels in-depth 
Understanding Go channels internals
26 Jul 2018

Sasha Yakovtseva
Golang developer, iTechArt
a.yakautsava@itechart-group.com

* Agenda

- Revision
- Internal structure
- Internal optimizations
- Outro

* What are channels?

Channels are the main synchronization and communication primitive in Go, they need to be fast and scalable.

.caption [[https://github.com/dvyukov][_Dmitry_ _Vyukov_]]


Channels are a typed conduit through which you can send and receive values with the channel operator.

.caption [[https://tour.golang.org/concurrency/2][_Tour_ _of_ _Go_]]

* Tree types of channels

_Sync_ _channels._ 

- no buffering and buffer management code
- direct hand off semantics (a goroutine directly chooses the pair and accomplishes communication with it)

* Tree types of channels

_Sync_ _channels._ 

.image ch1.png 400 500

* Tree types of channels

_Async_ _channels._

- traditional producer-consumer queues based on ring buffer
- no hand off semantics â€“ an unblocked consumer competes on general rights with other consumers, if it loses the competition it blocks again

* Tree types of channels

_Async_ _channels._

.image ch2.png 

* Tree types of channels

_Async_ _channels_ _with_ _zero-sized_ _elements._

- semaphores
- no buffers (consume _O(1)_ memory)
- no hand off semantics

* Internal structure

.code snippets /type hchan/,/^}/

* Invariants
  
- at least one of _sendq_ and _recvq_ is empty
except for the case of an unbuffered channel with a single goroutine
blocked on it for both sending and receiving using a select statement,
in which case the length of _sendq_ and _recvq_ is limited only by the
size of the select statement.

For buffered channels, also:

- _qcount_ > 0 implies that _recvq_ is empty
- _qcount_ < _dataqsiz_ implies that _sendq_ is empty

* Links

.link https://www.youtube.com/watch?v=KBZlN0izeiY GopherCon 2017: Kavya Joshi - Understanding Channels
.link https://docs.google.com/document/d/1yIAYmbvL3JxOKOjuCyon7JhW4cSv1wy5hC0ApeGMV9s/pub Go channels on steroids 
.link https://tour.golang.org/concurrency/2 A Tour of Go
.link https://github.com/golang/go/blob/master/src/runtime/chan.go Source code
