Go channels in-depth 
Understanding Go channels internals
26 Jul 2018

Sasha Yakovtseva
Golang developer, iTechArt
a.yakautsava@itechart-group.com

* Agenda

- Revision
- Internal structure
- Channel operations
- Conclusion

* What are channels?

Channels are the main synchronization and communication primitive in Go, they need to be fast and scalable.

.caption [[https://github.com/dvyukov][_Dmitry_ _Vyukov_]]


Channels are a typed conduit through which you can send and receive values with the channel operator.

.caption [[https://tour.golang.org/concurrency/2][_Tour_ _of_ _Go_]]

* Tree types of channels

_Sync_ _channels._ 

- no buffering and buffer management code
- direct hand off semantics (a goroutine directly chooses the pair and accomplishes communication with it)

* Tree types of channels

_Sync_ _channels._ 

.image ch1.png 400 500

* Tree types of channels

_Async_ _channels._

- traditional producer-consumer queues based on ring buffer
- no hand off semantics â€“ an unblocked consumer competes on general rights with other consumers, if it loses the competition it blocks again

* Tree types of channels

_Async_ _channels._

.image ch2.png 

* Tree types of channels

_Async_ _channels_ _with_ _zero-sized_ _elements._

- semaphores
- no buffers (consume _O(1)_ memory)
- no hand off semantics

* Internal structure

.code snippets /type hchan/,/^}/

* Invariants
  
- at least one of _sendq_ and _recvq_ is empty
except for the case of an unbuffered channel with a single goroutine
blocked on it for both sending and receiving using a select statement,
in which case the length of _sendq_ and _recvq_ is limited only by the
size of the select statement.

For buffered channels, also:

- _qcount_ > 0 implies that _recvq_ is empty
- _qcount_ < _dataqsiz_ implies that _sendq_ is empty

* Making channels

.code snippets /func makechan/,/^}/

* Send function 

.code snippets /func chansend/,/{$/

Send function receives four arguments:

- the channel itself
- a pointer to the sent data
- flag for non-blocking call
- caller's instruction pointer (used for race detection)

It returns *true* if the sent was successful.

* Send to nil channels

.code snippets /SEND_NIL/,/SEND_NIL/

When sending to a nil channel, goroutine blocks forever.

* Lock-free failed non-blocking sending

.code snippets /SEND_FAST/,/SEND_FAST/

- observe whether channel is closed
- observe whether channel is not ready for sending

Each of these observations is a single word-sized read (aka atomic).

It is okay if the reads are reordered here.

* Lock-free failed non-blocking sending

What if channel closes in *between* the observations?

Because a closed channel cannot transition from 'ready for sending' to
'not ready for sending', even if the channel is closed between the two observations,
they imply a moment between the two when the channel was both not yet closed
and not ready for sending. We behave as if we observed the channel at that moment,
and report that the send cannot proceed.

* Sending proceeded

.code snippets /SEND_LOCK_DIRECT/,/SEND_LOCK_DIRECT/

Sending to a closed channel leads to panic.

When waiting receiver is found the value is passed directly to the receiver, bypassing the channel buffer (if any).

* Sending proceeded

.code snippets /SEND_LOCK_BUF/,/SEND_LOCK_BUF/

When no receiver is found use buffer to store the value sent.

* Sending failed

.code snippets /SEND_BLOCK/,/SEND_BLOCK/

If the call was non-blocking simply return.

Otherwise put oneself in the sendq.

* Waking up!

.code snippets /SEND_FINISHED/,/SEND_FINISHED/

Goroutine wakes up after:

- the sent value is consumed by a receiver
- the channel was closed during the sleep time

* Receive function

.code snippets /func chanrecv/,/{$/

Receive function takes three arguments:

- the channel itself
- a pointer where the received data should be stored (nil to ignore the data)
- flag for non-blocking call

The return values are:

- flag for the successful receive operation
- flag for the actual data received

* Receive from nil channels

.code snippets /RECV_NIL/,/RECV_NIL/

When receiving from a nil channel, goroutine blocks forever.

* Lock-free failed non-blocking receiving

.code snippets /RECV_FAST/,/RECV_FAST/

- observe whether channel is not ready for receiving
- observe whether channel is closed

Each of these observations is a single word-sized read (aka atomic).

The order of operation is important here!

* Lock-free failed non-blocking receiving
	
Because a channel cannot be reopened, the later observation of the channel
being not closed implies that it was also not closed at the moment of the
first observation. We behave as if we observed the channel at that moment
and report that the receive cannot proceed.

* Receiving proceeded

.code snippets /RECV_LOCK_DIRECT/,/RECV_LOCK_DIRECT/

Receiving from a closed channel results in default value.

If buffer is size 0, receive value directly from sender.

Otherwise, receive from head of queue and add sender's value to the tail of the queue (both map to the same buffer slot because the queue is full).

* Receiving proceeded

.code snippets /RECV_BUF_DIRECT/,/RECV_BUF_DIRECT/

When no sender is found use buffer to possess the value.

* Receiving failed

.code snippets /RECV_BLOCK/,/RECV_BLOCK/

If the call was non-blocking simply return.

Otherwise put oneself in the recvq.

* Waking up!

.code snippets /RECV_FINISHED/,/RECV_FINISHED/

Goroutine wakes up after:

- data was actually received
- the channel was closed during the sleep time

* Closing the channel

.code snippets /func closechan/,/c.closed = 1/

Closing nil or closed channel will panic!

* Readers after channel closing 

.code snippets /CLOSE_READERS/,/CLOSE_READERS/

- 'send' default value to the blocked readers
- link them for further resuming

* Writers after channel closing 

.code snippets /CLOSE_WRITERS/,/CLOSE_WRITERS/

- set _param_ to nil so that senders will panic
- link them for further resuming

* Resuming blocked goroutines 

.code snippets /CLOSE_RESUME/,/CLOSE_RESUME/

Resume all blocked on channel goroutines *after* the lock is released.

As a result:

- receivers get default values
- senders panic

* Post-compile code

    select {
    case c <- v:
    	... foo
    default:
    	... bar
    }

becomes

	if chansend(c, v, false, getcallerpc()) {
		... foo
	} else {
		... bar
	}

* Post-compile code

    select {
    case v = <-c:
    	... foo
    default:
    	... bar
    }

becomes

    selected, _ = chanrecv(c, &v, false)
    if selected {
         ... foo
    } else {
        ... bar
    }

* Post-compile code

    select {
    case v, ok = <-c:
    	... foo
    default:
    	... bar
    }

becomes

	selected, ok = chanrecv(c, &v, false)
	if c != nil && selected {
		... foo
	} else {
		... bar
	}


* Links

.link https://www.youtube.com/watch?v=KBZlN0izeiY GopherCon 2017: Kavya Joshi - Understanding Channels
.link https://docs.google.com/document/d/1yIAYmbvL3JxOKOjuCyon7JhW4cSv1wy5hC0ApeGMV9s/pub Go channels on steroids 
.link https://tour.golang.org/concurrency/2 A Tour of Go
.link https://github.com/golang/go/blob/master/src/runtime/chan.go Source code
