type hchan struct {
	qcount   uint           // total data in the queue
	dataqsiz uint           // size of the circular queue
	buf      unsafe.Pointer // points to an array of dataqsiz elements
	elemsize uint16
	closed   uint32
	elemtype *_type // element type
	sendx    uint   // send index
	recvx    uint   // receive index
	recvq    waitq  // list of recv waiters
	sendq    waitq  // list of send waiters

	// lock protects all fields in hchan, as well as several
	// fields in sudogs blocked on this channel.
	//
	// Do not change another G's status while holding this lock
	// (in particular, do not ready a G), as this can deadlock
	// with stack shrinking.
	lock mutex
}

func makechan(t *chantype, size int) *hchan {
	elem := t.elem
	if elem.size >= 1<<16 { 	// compiler checks this but be safe.
		throw("makechan: invalid channel element type")
	}
    ...
	var c *hchan
	switch {
	case size == 0 || elem.size == 0:   // Queue or element size is zero.
		c = (*hchan)(mallocgc(hchanSize, nil, true))
		// Race detector uses this location for synchronization.
		c.buf = unsafe.Pointer(c)
	case elem.kind&kindNoPointers != 0: // Elements do not contain pointers.
		// Allocate hchan and buf in one call.
		c = (*hchan)(mallocgc(hchanSize+uintptr(size)*elem.size, nil, true))
		c.buf = add(unsafe.Pointer(c), hchanSize)
	default:                            // Elements contain pointers.
		c = new(hchan)
		c.buf = mallocgc(uintptr(size)*elem.size, elem, true)
	}
    ...
	return c
}

func chansend(c *hchan, ep unsafe.Pointer, block bool, callerpc uintptr) bool {
// SEND_NIL OMIT
    if c == nil {
		if !block {
			return false
		}
		gopark(nil, nil, "chan send (nil chan)", traceEvGoStop, 2)
		throw("unreachable")
	}
// SEND_NIL OMIT

// SEND_FAST OMIT
	if !block && c.closed == 0 && ((c.dataqsiz == 0 && c.recvq.first == nil) ||
		(c.dataqsiz > 0 && c.qcount == c.dataqsiz)) {
		return false
	}
// SEND_FAST OMIT

	var t0 int64
	if blockprofilerate > 0 {
		t0 = cputicks()
	}

// SEND_LOCK_DIRECT OMIT
	lock(&c.lock)
	if c.closed != 0 {
		unlock(&c.lock)
		panic(plainError("send on closed channel"))
	}
	if sg := c.recvq.dequeue(); sg != nil {
		send(c, sg, ep, func() { unlock(&c.lock) }, 3)
		return true
	}
// SEND_LOCK_DIRECT OMIT

// SEND_LOCK_BUF OMIT
	lock(&c.lock)
    ...
	if c.qcount < c.dataqsiz {
		qp := chanbuf(c, c.sendx)          
		typedmemmove(c.elemtype, qp, ep)   
		c.sendx++
		if c.sendx == c.dataqsiz {         
			c.sendx = 0
		}
		c.qcount++
		unlock(&c.lock)
		return true
	}
// SEND_LOCK_BUF OMIT

// SEND_BLOCK OMIT
	lock(&c.lock)
    ...
	if !block {
		unlock(&c.lock)
		return false
	}
	// Block on the channel. Some receiver will complete our operation for us.
	gp := getg()
	mysg := acquireSudog()
	mysg.elem = ep      // this will be used by receiver later
	...
	c.sendq.enqueue(mysg)
	goparkunlock(&c.lock, "chan send", traceEvGoBlockSend, 3)
// SEND_BLOCK OMIT

// SEND_FINISHED OMIT
	...
	if gp.param == nil { // this param must be filled by a receiver
		if c.closed == 0 {
			throw("chansend: spurious wakeup")
		}
		panic(plainError("send on closed channel"))
	}
	releaseSudog(mysg)
	return true
}
// SEND_FINISHED OMIT

func chanrecv(c *hchan, ep unsafe.Pointer, block bool) (selected, received bool) {
// RECV_NIL OMIT
	if c == nil {
		if !block {
			return
		}
		gopark(nil, nil, "chan receive (nil chan)", traceEvGoStop, 2)
		throw("unreachable")
	}
// RECV_NIL OMIT

// RECV_FAST OMIT
    if !block && (c.dataqsiz == 0 && c.sendq.first == nil ||
		c.dataqsiz > 0 && atomic.Loaduint(&c.qcount) == 0) &&
		atomic.Load(&c.closed) == 0 {
		return
	}
// RECV_FAST OMIT

// RECV_LOCK_DIRECT OMIT
	lock(&c.lock)
	if c.closed != 0 && c.qcount == 0 { // tha channel is drained & closed
		unlock(&c.lock)
		if ep != nil {
			typedmemclr(c.elemtype, ep) // copy zero value if necessary
		}
		return true, false
	}
	if sg := c.sendq.dequeue(); sg != nil {
		recv(c, sg, ep, func() { unlock(&c.lock) }, 3)
		return true, true
	}
// RECV_LOCK_DIRECT OMIT


// RECV_BUF_DIRECT OMIT
	lock(&c.lock)
    ...
	if c.qcount > 0 {
		qp := chanbuf(c, c.recvx) 
		if ep != nil {
			typedmemmove(c.elemtype, ep, qp)
		}
		typedmemclr(c.elemtype, qp)
		c.recvx++
		if c.recvx == c.dataqsiz {
			c.recvx = 0
		}
		c.qcount--
		unlock(&c.lock)
		return true, true
	}
// RECV_BUF_DIRECT OMIT

// RECV_BLOCK OMIT
	lock(&c.lock)
    ...
	if !block {
		unlock(&c.lock)
		return false, false
	}
	gp := getg()
	mysg := acquireSudog()
	mysg.elem = ep
	...
	c.recvq.enqueue(mysg)
	goparkunlock(&c.lock, "chan receive", traceEvGoBlockRecv, 3)
// RECV_BLOCK OMIT

// RECV_FINISHED OMIT
	...
	closed := gp.param == nil
	gp.param = nil
	mysg.c = nil
	releaseSudog(mysg)
	return true, !closed
}
// RECV_FINISHED OMIT


func closechan(c *hchan) {
	if c == nil {
		panic(plainError("close of nil channel"))
	}
	lock(&c.lock)
	if c.closed != 0 {
		unlock(&c.lock)
		panic(plainError("close of closed channel"))
	}
	c.closed = 1

// CLOSE_READERS OMIT
	lock(&c.lock)
    ...
	var glist *g
	for {
		sg := c.recvq.dequeue()
		if sg == nil {
			break
		}
		if sg.elem != nil {
			typedmemclr(c.elemtype, sg.elem)
			sg.elem = nil
		}
		gp := sg.g
		gp.param = nil
		gp.schedlink.set(glist)
		glist = gp
	}
// CLOSE_READERS OMIT

// CLOSE_WRITERS OMIT
	lock(&c.lock)
    ...
	for {
		sg := c.sendq.dequeue()
		if sg == nil {
			break
		}
		sg.elem = nil
		gp := sg.g
		gp.param = nil
		gp.schedlink.set(glist)
		glist = gp
	}
// CLOSE_WRITERS OMIT

// CLOSE_RESUME OMIT
	unlock(&c.lock)
	// Ready all Gs now that we've dropped the channel lock.
	for glist != nil {
		gp := glist
		glist = glist.schedlink.ptr()
		gp.schedlink = 0
		goready(gp, 3)
	}
}
// CLOSE_RESUME OMIT
